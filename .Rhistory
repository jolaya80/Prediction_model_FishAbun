do.call(grid.arrange, plot_list)
# Check data distribution and outliers
# Create a list to store the plots
plot_list <- list()
# Function to create histograms for each variable
for (var in vars) {
plot_list[[var]] <- plot(snappers, aes_string(x = var)) +
ggtitle(paste("Plot of", var)) +
xlab(var) +
ylab("Frequency") +
theme_minimal() +
print()
}
# Arrange and plot the plots
do.call(grid.arrange, plot_list)
plot(snappers, aes_string(x = var))
plot_list[[var]] <- ggplot(snappers, aes_string(x = var)) +
ggtitle(paste("Plot of", var)) +
xlab(var) +
ylab("Frequency") +
theme_minimal() +
print()
for (var in vars) {
plot_list[[var]] <- ggplot(snappers, aes_string(x = var)) +
ggtitle(paste("Plot of", var)) +
xlab(var) +
ylab("Frequency") +
theme_minimal() +
print()
}
# Arrange and plot the plots
do.call(grid.arrange, plot_list)
# Arrange and plot the plots
do.call(grid.arrange, hist_plot_list)
# Check data distribution and outliers
# Create a list to store the plots
plot_list <- list()
# Function to create histograms for each variable
for (var in vars) {
plot_list[[var]] <- ggplot(snappers, aes_string(x = var)) +
ggtitle(paste("Plot of", var)) +
xlab(var) +
ylab("Frequency") +
theme_minimal() +
print()
}
# Function to create histograms for each variable
for (var in vars) {
plot_list[[var]] <- ggplot(snappers, aes_string(x = var)) +
geom_point() +  # Aquí cambiamos a geom_point()
ggtitle(paste("Gráfico de dispersión de", var)) +
xlab(var) +
ylab("Valor") +  # Ajustamos el eje y para un gráfico de dispersión
theme_minimal()
}
# Arrange and plot the plots
do.call(grid.arrange, plot_list)
# Check data distribution and outliers
# Create a list to store the plots
plot_list <- list()
# Function to create histograms for each variable
for (var in vars) {
plot_list[[var]] <- ggplot(snappers, aes_string(x = var)) +
geom_point() +  # Aquí cambiamos a geom_point()
ggtitle(paste("Gráfico de dispersión de", var)) +
xlab(var) +
ylab("Valor") +  # Ajustamos el eje y para un gráfico de dispersión
theme_minimal()
}
# Arrange and plot the plots
do.call(grid.arrange, plot_list)
plot_scatterplots <- function(df) {
# Crear una lista para almacenar los gráficos
plot_list <- list()
# Iterar sobre las variables y crear un gráfico de dispersión para cada una
for (var in names(df)) {
plot_list[[var]] <- ggplot(df, aes_string(x = var)) +
geom_point() +  # Aquí cambiamos a geom_point()
ggtitle(paste("Gráfico de dispersión de", var)) +
xlab(var) +
ylab("Valor") +  # Ajustamos el eje y para un gráfico de dispersión
theme_minimal()
}
# Organizar y mostrar los gráficos en una cuadrícula
do.call("grid.arrange", plot_list)
}
plot_scatterplots(snappers)
plot_scatterplots <- function(df) {
# Crear una lista para almacenar los gráficos
plot_list <- list()
# Iterar sobre las variables y crear un gráfico de dispersión para cada una
for (var in names(df)) {
plot_list[[var]] <- ggplot(df, aes_string(x = var,  y = "value")) +
geom_point() +  # Aquí cambiamos a geom_point()
ggtitle(paste("Gráfico de dispersión de", var)) +
xlab(var) +
ylab("Valor") +  # Ajustamos el eje y para un gráfico de dispersión
theme_minimal()
}
# Organizar y mostrar los gráficos en una cuadrícula
do.call("grid.arrange", plot_list)
}
plot_scatterplots(snappers)
plot_scatterplots <- function(df) {
# Crear una lista para almacenar los gráficos
plot_list <- list()
# Iterar sobre las variables y crear un gráfico de dispersión para cada una
for (var in names(df)) {
plot_list[[var]] <- ggplot(df, aes_string(x = var,  y = value)) +
geom_point() +  # Aquí cambiamos a geom_point()
ggtitle(paste("Gráfico de dispersión de", var)) +
xlab(var) +
ylab("Valor") +  # Ajustamos el eje y para un gráfico de dispersión
theme_minimal()
}
# Organizar y mostrar los gráficos en una cuadrícula
do.call("grid.arrange", plot_list)
}
plot_scatterplots(snappers)
# Scatter plot to visualize relationships
ggplot(snappers, aes(x = CORAL, y = total_biomass)) +
geom_point() +
geom_smooth(method = "lm") +
labs(title = "Scatter Plot of Coral vs snapper abundance",
x = "Coral cover",
y = "Snapper biomass")
########## Scatter plot to visualize relationships
# Function to create scatterplots for each variable against 'Y'
plot_scatterplots <- function(df, y_var = "total_biomass") {
plot_list <- list()
for (var in names(df)) {
if (var != y_var) {  # Avoid plotting against itself
plot_list[[var]] <- ggplot(df, aes_string(x = var, y = y_var)) +
geom_point() +
ggtitle(paste("Scatter Plot of", var, "vs", y_var)) +
xlab(var) +
ylab(y_var) +
theme_minimal()
}
}
do.call("grid.arrange", plot_list)
}
# Call the function
plot_scatterplots(snappers)
########## Scatter plot to visualize relationships
# Function to create scatterplots for each variable against 'Y'
plot_scatterplots <- function(df, y_var = "total_biomass") {
plot_list <- list()
for (var in names(df)) {
if (var != y_var) {  # Avoid plotting against itself
plot_list[[var]] <- ggplot(df, aes_string(x = var, y = y_var)) +
geom_point() +
xlab(var) +
ylab(y_var) +
theme_minimal()
}
}
do.call("grid.arrange", plot_list)
}
# Call the function
plot_scatterplots(snappers)
###############################
# correlation for all variables
round(cor(snappers,
use = "pairwise.complete.obs"), # considering only the observations with complete data for both variables
digits = 2 # rounded to 2 decimals
)
# improved correlation matrix
library(corrplot)
corrplot(cor(snappers, use = "pairwise.complete.obs"),
method = "number",
type = "upper" # show only upper side
)
cor(snappers[, c("MEAN_RUG", "MIN_DEPTH", "Bare_Substrate", ...)])
###### Check for multicollinearity
library(car)
cor(snappers[, c("MEAN_RUG", "MIN_DEPTH", "Bare_Substrate", ...)])
cor(snappers[, c("MEAN_RUG", "MIN_DEPTH", "Bare_Substrate", "CORAL", "MACROALGAE", "SPONGES", "Coral_Richness", "Coral_Shannon", "lobster", "conch", "diadema")])
cor(snappers[, c("MEAN_RUG", "MIN_DEPTH", "Bare_Substrate", "CORAL", "MACROALGAE", "SPONGES", "Coral_Richness", "Coral_Shannon", "lobster", "conch", "diadema")],
use = "pairwise.complete.obs")
cor(snappers[, c("MEAN_RUG", "MIN_DEPTH", "Bare_Substrate", "CORAL", "MACROALGAE", "SPONGES", "Coral_Richness", "Coral_Shannon", "lobster", "conch", "diadema")],
use = "pairwise.complete.obs")
cor(snappers[, c("MEAN_RUG", "MIN_DEPTH", "Bare_Substrate", "CORAL", "MACROALGAE", "SPONGES", "Coral_Richness", "Coral_Shannon", "lobster", "conch", "diadema")],
use = "pairwise.complete.obs")
#### eliminar NA from data frame
# identify complete raws
filas_completas <- complete.cases(snappers)
# Crear un nuevo data frame con solo las filas completas
snapper_complete <- snappers[filas_completas, ]
# Create a plot for each variable
# Define the variables to plot
vars <- c("MEAN_RUG", "MIN_DEPTH", "Bare_Substrate", "CORAL", "MACROALGAE", "SPONGES", "Coral_Richness", "Coral_Shannon", "lobster", "conch", "diadema")
####### multiplot for histgrams
# Create a list to store the plots
hist_plot_list <- list()
hist_plot_list[[var]] <- ggplot(snapper_complete, aes_string(x = var)) +
geom_histogram(fill = "steelblue", color = "black") +
ggtitle(paste("Histogram of", var)) +
xlab(var) +
ylab("Frequency") +
theme_minimal()
# Arrange and plot the plots
do.call(grid.arrange, hist_plot_list)
# Create a plot for each variable and add it to the list
for (var in vars) {
hist_plot_list[[var]] <- ggplot(snapper_complete, aes_string(x = var)) +
geom_histogram(fill = "steelblue", color = "black") +
ggtitle(paste("Histogram of", var)) +
xlab(var) +
ylab("Frequency") +
theme_minimal()
}
# Arrange and plot the plots
do.call(grid.arrange, hist_plot_list)
# Create a plot for each variable and add it to the list
for (var in vars) {
hist_plot_list[[var]] <- ggplot(snapper_complete, aes_string(x = var)) +
geom_histogram(fill = "steelblue", color = "black") +
xlab(var) +
ylab("Frequency") +
theme_minimal()
}
# Arrange and plot the plots
do.call(grid.arrange, hist_plot_list)
# Call the function
plot_scatterplots(snappers_complete)
# Call the function
plot_scatterplots(snapper_complete)
cor(snapper_complete[, c("MEAN_RUG", "MIN_DEPTH", "Bare_Substrate", "CORAL", "MACROALGAE", "SPONGES", "Coral_Richness", "Coral_Shannon", "lobster", "conch", "diadema")])
# Transform variables if needed
snappers_transform <- snappers %>%
mutate(across(where(is.numeric), ~log1p(.)))
# Crear un nuevo data frame con solo las filas completas
snappers_complete <- snappers[filas_completas, ]
# Transform variables if needed
snappers_transform <- snappers_complete %>%
mutate(across(where(is.numeric), ~log1p(.)))
# Convert all columns to numeric
for (i in 1:ncol(snappers_complete)) {
df[, i] <- as.numeric(snappers_complete[, i])
}
# Convert all columns to numeric
snappers_complete[, i] <- as.numeric(snappers_complete[, i])
# upload the data
snappers <- read.csv("Datos_Florida/snappers.csv")
### select only numerical and relevant variables
snappers <- snappers %>%
select(MEAN_RUG,
MIN_DEPTH,
Bare_Substrate,
CORAL,
MACROALGAE,
SPONGES,
Coral_Richness,
Coral_Shannon,
Coral_evenness,
lobster,
conch,
diadema,
total_biomass)
library(ggplot2)  # For plotting
library(dplyr)    # For data manipulation
# upload the data
snappers <- read.csv("Datos_Florida/snappers.csv")
### select only numerical and relevant variables
snappers <- snappers %>%
select(MEAN_RUG,
MIN_DEPTH,
Bare_Substrate,
CORAL,
MACROALGAE,
SPONGES,
Coral_Richness,
Coral_Shannon,
Coral_evenness,
lobster,
conch,
diadema,
total_biomass)
library(tidyverse)
library(caret)    # For data partitioning and model training
library(gridExtra)# arrange multiple plots
#### eliminar NA from data frame
# identify complete raws
filas_completas <- complete.cases(snappers)
# Crear un nuevo data frame con solo las filas completas
snappers_complete <- snappers[filas_completas, ]
# Convert all columns to numeric
snappers_complete[, i] <- as.numeric(snappers_complete[, i])
# Convert all columns to numeric
for (i in 1:ncol(snappers_complete)) {
snappers_complete[, i] <- as.numeric(snappers_complete[, i])
}
# Create a plot for each variable
# Define the variables to plot
vars <- c("MEAN_RUG", "MIN_DEPTH", "Bare_Substrate", "CORAL", "MACROALGAE", "SPONGES", "Coral_Richness", "Coral_Shannon", "lobster", "conch", "diadema")
####### multiplot for histgrams
# Create a list to store the plots
hist_plot_list <- list()
# Create a plot for each variable and add it to the list
for (var in vars) {
hist_plot_list[[var]] <- ggplot(snapper_complete, aes_string(x = var)) +
geom_histogram(fill = "steelblue", color = "black") +
xlab(var) +
ylab("Frequency") +
theme_minimal()
}
# Create a plot for each variable and add it to the list
for (var in vars) {
hist_plot_list[[var]] <- ggplot(snappers_complete, aes_string(x = var)) +
geom_histogram(fill = "steelblue", color = "black") +
xlab(var) +
ylab("Frequency") +
theme_minimal()
}
# Arrange and plot the plots
do.call(grid.arrange, hist_plot_list)
########## Scatter plot to visualize relationships
# Function to create scatterplots for each variable against 'Y'
plot_scatterplots <- function(df, y_var = "total_biomass") {
plot_list <- list()
for (var in names(df)) {
if (var != y_var) {  # Avoid plotting against itself
plot_list[[var]] <- ggplot(df, aes_string(x = var, y = y_var)) +
geom_point() +
xlab(var) +
ylab(y_var) +
theme_minimal()
}
}
do.call("grid.arrange", plot_list)
}
# Call the function
plot_scatterplots(snapper_complete)
# Call the function
plot_scatterplots(snappers_complete)
###### Check for multicollinearity
library(car)
cor(snappers_complete[, c("MEAN_RUG", "MIN_DEPTH", "Bare_Substrate", "CORAL", "MACROALGAE", "SPONGES", "Coral_Richness", "Coral_Shannon", "lobster", "conch", "diadema")])
# Transform variables log transformation
snappers_transform <- snappers_complete %>%
mutate(across(where(is.numeric), ~log1p(.)))
# Call the function
plot_scatterplots(snappers_transform)
####### multiplot for histgrams
# Create a list to store the plots
plot_histogram <- function(df_hist) {
hist_plot_list <- list()
# Create a plot for each variable and add it to the list
for (var in vars) {
hist_plot_list[[var]] <- ggplot(snappers_complete, aes_string(x = var)) +
geom_histogram(fill = "steelblue", color = "black") +
xlab(var) +
ylab("Frequency") +
theme_minimal()
}
# Arrange the plots in a grid
do.call("grid.arrange", hist_plot_list, nrow = nrow(hist_plot_list))  # Adjust nrow as needed
}
# Arrange and plot the plots
do.call(grid.arrange, hist_plot_list)
# Call the function
plot_histogram(snappers_complete)
# Call the function
plot_histogram(snappers_complete)
# Arrange and plot the plots
do.call(grid.arrange, hist_plot_list)
####### multiplot for histgrams
# Create a list to store the plots
plot_histogram <- function(df_hist) {
hist_plot_list <- list()
# Create a plot for each variable and add it to the list
for (var in vars) {
hist_plot_list[[var]] <- ggplot(snappers_complete, aes_string(x = var)) +
geom_histogram(fill = "steelblue", color = "black") +
xlab(var) +
ylab("Frequency") +
theme_minimal()
}
# Arrange the plots in a grid
do.call(grid.arrange, hist_plot_list)
}
# Call the function
plot_histograms(snappers_complete)
# Call the function
plot_histogram(snappers_complete)
plot_histogram(snappers_transform)
plot_histogram(snappers_transform)
# Call the function
plot_scatterplots(snappers_transform)
# Transform variables log transformation
snappers_transform <- snappers_complete %>%
mutate(across(where(is.numeric), ~log1p(.)))
plot_histogram(snappers_transform)
ggplot(snappers_complete, aes_string(x = MEAN_RUG)) +
geom_histogram(fill = "steelblue", color = "black") +
xlab(var) +
ylab("Frequency") +
theme_minimal()
ggplot(snappers_complete, aes_string(x = value)) +
geom_histogram(fill = "steelblue", color = "black") +
xlab(var) +
ylab("Frequency") +
theme_minimal()
ggplot(snappers_transform, aes_string(x = MEAN_RUG)) +
geom_histogram(fill = "steelblue", color = "black") +
xlab(var) +
ylab("Frequency") +
theme_minimal()
ggplot(snappers_transform, aes_string(x = MEAN_RUG)) +
geom_histogram(fill = "steelblue", color = "black") +
xlab(MEAN_RUG) +
ylab("Frequency") +
theme_minimal()
ggplot(snappers_transform, aes(x = MEAN_RUG)) +
geom_histogram(binwidth = 0.1, fill = "steelblue", color = "black") +
labs(title = "Histogram of MEAN_RUG", x = "MEAN_RUG", y = "Frequency") +
theme_classic()
cor(snappers_transform[, c("MEAN_RUG", "MIN_DEPTH", "Bare_Substrate", "CORAL", "MACROALGAE", "SPONGES", "Coral_Richness", "Coral_Shannon", "lobster", "conch", "diadema")])
library(ggplot2)  # For plotting
library(dplyr)    # For data manipulation
# upload the data
snappers <- read.csv("Datos_Florida/snappers.csv")
### select only numerical and relevant variables
snappers <- snappers %>%
select(MEAN_RUG,
MIN_DEPTH,
Bare_Substrate,
CORAL,
MACROALGAE,
SPONGES,
Coral_Richness,
Coral_Shannon,
Coral_evenness,
lobster,
conch,
diadema,
total_biomass)
library(tidyverse)
library(MASS)     # For stepAIC function
library(caret)    # For data partitioning and model training
library(gridExtra)# arrange multiple plots
#### eliminar NA from data frame
# identify complete raws
filas_completas <- complete.cases(snappers)
# Crear un nuevo data frame con solo las filas completas
snappers_complete <- snappers[filas_completas, ]
# Convert all columns to numeric
for (i in 1:ncol(snappers_complete)) {
snappers_complete[, i] <- as.numeric(snappers_complete[, i])
}
# Create a plot for each variable
# Define the variables to plot
vars <- c("MEAN_RUG", "MIN_DEPTH", "Bare_Substrate", "CORAL", "MACROALGAE", "SPONGES", "Coral_Richness", "Coral_Shannon", "lobster", "conch", "diadema")
####### multiplot for histgrams
# Create a list to store the plots
plot_histogram <- function(df_hist) {
hist_plot_list <- list()
# Create a plot for each variable and add it to the list
for (var in vars) {
hist_plot_list[[var]] <- ggplot(snappers_complete, aes_string(x = var)) +
geom_histogram(fill = "steelblue", color = "black") +
xlab(var) +
ylab("Frequency") +
theme_minimal()
}
# Arrange the plots in a grid
do.call(grid.arrange, hist_plot_list)
}
# Call the function
plot_histogram(snappers_complete)
########## Scatter plot to visualize relationships
# Function to create scatterplots for each variable against 'Y'
plot_scatterplots <- function(df, y_var = "total_biomass") {
plot_list <- list()
for (var in names(df)) {
if (var != y_var) {  # Avoid plotting against itself
plot_list[[var]] <- ggplot(df, aes_string(x = var, y = y_var)) +
geom_point() +
xlab(var) +
ylab(y_var) +
theme_minimal()
}
}
do.call("grid.arrange", plot_list)
}
# Call the function
plot_scatterplots(snappers_complete)
###### Check for multicollinearity
library(car)
cor(snappers_complete[, c("MEAN_RUG", "MIN_DEPTH", "Bare_Substrate", "CORAL", "MACROALGAE", "SPONGES", "Coral_Richness", "Coral_Shannon", "lobster", "conch", "diadema")])
# Transform variables log transformation
snappers_transform <- snappers_complete %>%
mutate(across(where(is.numeric), ~log1p(.)))
cor(snappers_transform[, c("MEAN_RUG", "MIN_DEPTH", "Bare_Substrate", "CORAL", "MACROALGAE", "SPONGES", "Coral_Richness", "Coral_Shannon", "lobster", "conch", "diadema")])
# Call the function
plot_scatterplots(snappers_transform)
plot_histogram(snappers_transform)
###############################
# correlation for all variables
# improved correlation matrix
library(corrplot)
corrplot(cor(snappers, use = "pairwise.complete.obs"),
method = "number",
type = "upper" # show only upper side
)
library(ggplot2)  # For plotting
library(dplyr)    # For data manipulation
# upload the data
snappers <- read.csv("Datos_Florida/snappers.csv")
head(snappers, 5)
View(snappers)
